name: build-deploy

on:
  workflow_call:

jobs:
  build-deploy:
    runs-on: self-hosted
    steps:
    - name: "Checkout source code"
      uses: actions/checkout@v2
      with:
        token: ${{ secrets.ORG_TOKEN }}
        submodules: recursive
    # - name: "Compress source code"
    #   run: |
    #     tar_file=${{ github.event.repository.name }}.tar.gz
    #     mkdir me-workflows
    #     tar --exclude=.git --exclude=me-workflows -zcf me-workflows/${tar_file} .
    # - name: "Code backup"
    #   uses: jakejarvis/s3-sync-action@master
    #   with:
    #     args: --follow-symlinks --delete --exclude '.git/*'
    #   env:
    #     AWS_S3_BUCKET: ${{ secrets.CODE_BACKUP_S3_BUCKET }}
    #     AWS_ACCESS_KEY_ID: ${{ secrets.CODE_BACKUP_S3_ACCESS_ID }}
    #     AWS_SECRET_ACCESS_KEY: ${{ secrets.CODE_BACKUP_S3_SECRET }}
    #     AWS_REGION: ap-southeast-1
    #     SOURCE_DIR: me-workflows
    #     DEST_DIR: ${{ github.event.repository.name }}
    # Security-DependencyCheck
    - name: "Dependency Check"
      uses: javixeneize/DependencyCheck_Action@main
      id: Depcheck
      with:
        path: '.'
        format: 'HTML'
      continue-on-error: true
    # Security-DependencyCheck-UploadReport  
    - name: "Upload Check Reports"
      uses: actions/upload-artifact@v3
      with:
        name: 'security-report'
        path: ${{github.workspace}}/reports
      continue-on-error: true
    # Security-SAST   
    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      continue-on-error: true
    - name: "Prepare environment"
      id: prep
      run: |
        # Source our global environment variables & add them to GITHUB_ENV for subsequent steps
        source .github/global.env
        cat .github/global.env >> ${GITHUB_ENV}

        SHORT_SHA=`git rev-parse --short ${{ github.sha }}`
        echo "REVISION=${MAIN_BRANCH}/${SHORT_SHA}" >> $GITHUB_ENV
        echo  "RELEASE_DATE=$((`date "+%Y%m%d%H%M%S"`))" >> ${GITHUB_ENV}
        # Configure our environment based on the branch, or if this is a PR build
        if [[ '${{ github.ref }}' == refs/heads/${MAIN_BRANCH} ]]; then
            echo "::set-output name=tag::main-${{ github.sha }}"
            source .github/dev.env
            cat .github/dev.env >> ${GITHUB_ENV}
        else
          echo "This isn from main branch. Exiting..."
          exit 1
        fi

        echo "::set-output name=kubernetes-namespace::${KUBERNETES_NAMESPACE}"
    - name: Build, tag, and push image to Amazon ECR
      env:
        IMAGE_TAG: ${{ steps.prep.outputs.tag }}
        GITHUB_TOKEN: ${{ secrets.ORG_TOKEN }}
      run: |
        # This is needed because the Github Action environment variables have issues if the value contains spaces (e.g. 'EXTRA_DOCKER_ARGS')
        source .github/global.env
        # Pull latest-main image for cache
        LATEST_MAIN_IMAGE=${{ env.ECR_REGISTRY }}/${{ env.APP_NAME }}:latest-main
        # if the latest-main image exists, cache from it
        exists=$(docker manifest inspect ${LATEST_MAIN_IMAGE} > /dev/null ; echo $?)
        if [  $exists -eq 0 ]
        then
           docker pull ${LATEST_MAIN_IMAGE}
           docker build -f ${{ env.DOCKERFILE }} -t ${{ env.ECR_REGISTRY }}/${{ env.APP_NAME }}:${IMAGE_TAG} ${EXTRA_DOCKER_ARGS} . --cache-from ${LATEST_MAIN_IMAGE}
        else
           docker build -f ${{ env.DOCKERFILE }} -t ${{ env.ECR_REGISTRY }}/${{ env.APP_NAME }}:${IMAGE_TAG} ${EXTRA_DOCKER_ARGS} .
        fi
        

        # Build and push the image using the SHA tag
        docker push ${{ env.ECR_REGISTRY }}/${{ env.APP_NAME }}:${IMAGE_TAG}

        docker tag ${{ env.ECR_REGISTRY }}/${{ env.APP_NAME }}:${IMAGE_TAG} ${LATEST_MAIN_IMAGE}
        docker push ${LATEST_MAIN_IMAGE}
    # Image security scanning
    - name: Run veinmind-tools to scan image
      uses: chaitin/veinmind-action@main
      with:
        scan-action: scan image
        image-ref: '${{ env.ECR_REGISTRY }}/${{ env.APP_NAME }}:${IMAGE_TAG}'
      continue-on-error: true
    - name: AWS assume cicd role
      uses: aws-actions/configure-aws-credentials@v1
      env:
        AWS_SDK_LOAD_CONFIG: false
      with:
        aws-region: ${{ env.AWS_REGION }}
        role-to-assume: ${{ env.GLOBAL_AWS_ROLE_ARN }}
        role-duration-seconds: 1200
        role-session-name: GitHubAction
    - name: AWS assume helm role
      uses: aws-actions/configure-aws-credentials@v1
      env:
        AWS_SDK_LOAD_CONFIG: false
      with:
        aws-region: ${{ env.AWS_REGION }}
        role-to-assume: ${{ env.HELM_AWS_ROLE_ARN }}
        role-duration-seconds: 1200
        role-session-name: GitHubAction
    - name: Deploy
      id: deploy
      uses: docker://590183924964.dkr.ecr.ap-southeast-1.amazonaws.com/infrastructure:latest
      env:
        RELEASE_NAME: ${{ env.APP_NAME }}
        IMAGE_NAME: ${{ env.ECR_REGISTRY }}/${{ env.APP_NAME }}
        IMAGE_TAG: ${{ steps.prep.outputs.tag }}
        AWS_REGION: ${{ env.AWS_REGION }}
        ENVIRONMENT: ${{ env.ENVIRONMENT }}
        KUBERNETES_NAMESPACE: ${{ steps.prep.outputs.kubernetes-namespace }}
        STAGE: ${{ env.STAGE }}
      with:
        entrypoint: ./deploy/deploy
